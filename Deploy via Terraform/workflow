root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  ll
total 72
drwxr-xr-x 1 root root  4096 Jul 25 07:49 ./
drwx------ 1 root root  4096 Jul 25 07:36 ../
drwxr-xr-x 3 root root  4096 Jul 25 07:37 .terraform/
-rw-r--r-- 1 root root  1404 Jul 25 07:37 .terraform.lock.hcl
-rw-r--r-- 1 root root   530 Jul  4 10:24 README.md
-rw-r--r-- 1 root root   320 Jul 25 07:46 ec2.tf
-rw-r--r-- 1 root root   110 Jul 25 07:46 keypair.tf
-rw-r--r-- 1 root root   114 Jul 25 07:32 main.tf
-rw-r--r-- 1 root root   161 Jul 25 07:11 provider.tf
-rw-r--r-- 1 root root   658 Jul 25 07:25 security_groups.tf
-rw-r--r-- 1 root root 10920 Jul 25 07:49 terraform.tfstate
-rw-r--r-- 1 root root   180 Jul 25 07:49 terraform.tfstate.backup
-rw-r--r-- 1 root root    66 Jul 25 07:09 terraform.tfvars
-rw-r--r-- 1 root root  1357 Jul 25 07:18 user_data.conf
-rw-r--r-- 1 root root   735 Jul 25 07:36 variables.tf





root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.4.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.













root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.springboot_app will be created
  + resource "aws_instance" "springboot_app" {
      + ami                                  = "ami-0c02fb55956c7d316"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "deployer-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "us-east-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "allow_ssh_ping_8080",
        ]
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "SpringBootApp"
        }
      + tags_all                             = {
          + "Name" = "SpringBootApp"
        }
      + tenancy                              = (known after apply)
      + user_data                            = <<-EOT
            #!/bin/bash
            # Update and install dependencies
            yum update -y
            yum install -y git curl wget tar
            
            # Install Oracle JDK 21
            mkdir -p /usr/lib/jvm
            cd /usr/lib/jvm
            curl -LO https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
            tar -xzf jdk-21_linux-x64_bin.tar.gz
            alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-21.0.8/bin/java 2
            alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-21.0.8/bin/javac 2
            alternatives --set java /usr/lib/jvm/jdk-21.0.8/bin/java
            alternatives --set javac /usr/lib/jvm/jdk-21.0.8/bin/javac
            
            # Install Maven manually
            MAVEN_VERSION=3.8.8
            cd /opt
            curl -sLO https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
            tar -xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
            ln -s apache-maven-$MAVEN_VERSION maven
            echo "export M2_HOME=/opt/maven" >> /etc/profile.d/maven.sh
            echo "export PATH=\$M2_HOME/bin:\$PATH" >> /etc/profile.d/maven.sh
            chmod +x /etc/profile.d/maven.sh
            source /etc/profile.d/maven.sh
            
            # Clone your Spring Boot project
            cd /home/ec2-user
            git clone https://github.com/ikanko1989/SpringBootFootballClub.git
            chown -R ec2-user:ec2-user /home/ec2-user/SpringBootFootballClub
            # Run the app as ec2-user
            cd /home/ec2-user/SpringBootFootballClub/FootballClub
            mvn clean nohup spring-boot:run > /home/ec2-user/springboot.log 2>&1 &
            EOT
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_key_pair.deployer will be created
  + resource "aws_key_pair" "deployer" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "deployer-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0iALDi17WAyW51U74HOyoBoZGta1MydQwG9vNE/mMniEounLqVXU/Sjn8I94fgMQUGetWDZk57NYZbWjOkPPOUjOohfPignXZhOB7ojyxOfkkXcSrmNEccEi/XLP9MTRJJJ0Rm2VOZFchlXx1Qg3L5QvH6FqyRutg2PgayvuTW4teGKJ5nfueOoOFpxIiZhst4JEGNTSj44gSXanPVcAwqC0N0YYTnMIDM+Av+7fu95WzZmwx1562rY0g0g6w/r3d0hpn3uUTE2yGy+vVYENDFub4LyW3twTdwb2h+STDkumne2+AH/NLYdGgQqPP+hf+oR3CDtc5at5ql3HMNMoxvp5NUSJobTrrYaf5+B8J/rNZiEl+vvTllrA8bvh3vFHAtQuqpAOyHBW4ncsePuDgW0Dfo6rjf5asY7z5YeR1JJfqlSiIQyWpyI6bl2cLpX0J2Ehx1hq02RzLbOlu2FIV938DmrA2dp9jl8zhORfbU+chNxEo+FshElVpd9y4ML8ocm5Kv2pM2W9AKUlhCAg5bZ7kcTJSTlGaiXCy6cl/En0sy/y8nIvkVpzs21DeS6jOOQqxyDH5F0E6MacUzgfpeJeU0oAXcX3GFC/1TM2IK+id3k92HKMt+TGSCqujEy8POjWTqoRxVeJFgoCMlMGKaEQ58sZNEiCVVTcp9VW0WQ== root@controlplane"
      + region          = "us-east-1"
      + tags_all        = (known after apply)
    }

  # aws_security_group.allow_ssh_ping_8080 will be created
  + resource "aws_security_group" "allow_ssh_ping_8080" {
      + arn                    = (known after apply)
      + description            = "Allow SSH, ICMP (ping), and TCP 8080"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = -1
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "icmp"
              + security_groups  = []
              + self             = false
              + to_port          = -1
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "allow_ssh_ping_8080"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow-ssh-ping-8080"
        }
      + tags_all               = {
          + "Name" = "allow-ssh-ping-8080"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_ip = (known after apply)

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.

root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.springboot_app will be created
  + resource "aws_instance" "springboot_app" {
      + ami                                  = "ami-0c02fb55956c7d316"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "deployer-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "us-east-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "allow_ssh_ping_8080",
        ]
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "SpringBootApp"
        }
      + tags_all                             = {
          + "Name" = "SpringBootApp"
        }
      + tenancy                              = (known after apply)
      + user_data                            = <<-EOT
            #!/bin/bash
            # Update and install dependencies
            yum update -y
            yum install -y git curl wget tar
            
            # Install Oracle JDK 21
            mkdir -p /usr/lib/jvm
            cd /usr/lib/jvm
            curl -LO https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
            tar -xzf jdk-21_linux-x64_bin.tar.gz
            alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-21.0.8/bin/java 2
            alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-21.0.8/bin/javac 2
            alternatives --set java /usr/lib/jvm/jdk-21.0.8/bin/java
            alternatives --set javac /usr/lib/jvm/jdk-21.0.8/bin/javac
            
            # Install Maven manually
            MAVEN_VERSION=3.8.8
            cd /opt
            curl -sLO https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
            tar -xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
            ln -s apache-maven-$MAVEN_VERSION maven
            echo "export M2_HOME=/opt/maven" >> /etc/profile.d/maven.sh
            echo "export PATH=\$M2_HOME/bin:\$PATH" >> /etc/profile.d/maven.sh
            chmod +x /etc/profile.d/maven.sh
            source /etc/profile.d/maven.sh
            echo "source /etc/profile.d/maven.sh" >> /home/ec2-user/.bash_profile
            chown ec2-user:ec2-user /home/ec2-user/.bash_profile
            
            # Clone your Spring Boot project
            cd /home/ec2-user
            git clone https://github.com/ikanko1989/SpringBootFootballClub.git
            chown -R ec2-user:ec2-user /home/ec2-user/SpringBootFootballClub
            
            # Run the app as ec2-user
            sudo -u ec2-user bash -c "
            cd /home/ec2-user/SpringBootFootballClub/FootballClub
            mvn clean spring-boot:run > /home/ec2-user/springboot.log 2>&1 &
            "
        EOT
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_key_pair.deployer will be created
  + resource "aws_key_pair" "deployer" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "deployer-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0iALDi17WAyW51U74HOyoBoZGta1MydQwG9vNE/mMniEounLqVXU/Sjn8I94fgMQUGetWDZk57NYZbWjOkPPOUjOohfPignXZhOB7ojyxOfkkXcSrmNEccEi/XLP9MTRJJJ0Rm2VOZFchlXx1Qg3L5QvH6FqyRutg2PgayvuTW4teGKJ5nfueOoOFpxIiZhst4JEGNTSj44gSXanPVcAwqC0N0YYTnMIDM+Av+7fu95WzZmwx1562rY0g0g6w/r3d0hpn3uUTE2yGy+vVYENDFub4LyW3twTdwb2h+STDkumne2+AH/NLYdGgQqPP+hf+oR3CDtc5at5ql3HMNMoxvp5NUSJobTrrYaf5+B8J/rNZiEl+vvTllrA8bvh3vFHAtQuqpAOyHBW4ncsePuDgW0Dfo6rjf5asY7z5YeR1JJfqlSiIQyWpyI6bl2cLpX0J2Ehx1hq02RzLbOlu2FIV938DmrA2dp9jl8zhORfbU+chNxEo+FshElVpd9y4ML8ocm5Kv2pM2W9AKUlhCAg5bZ7kcTJSTlGaiXCy6cl/En0sy/y8nIvkVpzs21DeS6jOOQqxyDH5F0E6MacUzgfpeJeU0oAXcX3GFC/1TM2IK+id3k92HKMt+TGSCqujEy8POjWTqoRxVeJFgoCMlMGKaEQ58sZNEiCVVTcp9VW0WQ== root@controlplane"
      + region          = "us-east-1"
      + tags_all        = (known after apply)
    }

  # aws_security_group.allow_ssh_ping_8080 will be created
  + resource "aws_security_group" "allow_ssh_ping_8080" {
      + arn                    = (known after apply)
      + description            = "Allow SSH, ICMP (ping), and TCP 8080"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = -1
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "icmp"
              + security_groups  = []
              + self             = false
              + to_port          = -1
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "allow_ssh_ping_8080"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow-ssh-ping-8080"
        }
      + tags_all               = {
          + "Name" = "allow-ssh-ping-8080"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_key_pair.deployer: Creating...
aws_security_group.allow_ssh_ping_8080: Creating...
aws_key_pair.deployer: Creation complete after 1s [id=deployer-key]
aws_security_group.allow_ssh_ping_8080: Creation complete after 3s [id=sg-07200bfd5463e5791]
aws_instance.springboot_app: Creating...
aws_instance.springboot_app: Still creating... [10s elapsed]
aws_instance.springboot_app: Creation complete after 14s [id=i-0f93898e794f1a8ea]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

public_ip = "3.80.49.220"

root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  terraform show
# aws_instance.springboot_app:
resource "aws_instance" "springboot_app" {
    ami                                  = "ami-0c02fb55956c7d316"
    arn                                  = "arn:aws:ec2:us-east-1:381491834499:instance/i-0f93898e794f1a8ea"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-0f93898e794f1a8ea"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = "deployer-key"
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-0dff93301c1e99e30"
    private_dns                          = "ip-172-31-19-110.ec2.internal"
    private_ip                           = "172.31.19.110"
    public_dns                           = "ec2-3-80-49-220.compute-1.amazonaws.com"
    public_ip                            = "3.80.49.220"
    region                               = "us-east-1"
    secondary_private_ips                = []
    security_groups                      = [
        "allow_ssh_ping_8080",
    ]
    source_dest_check                    = true
    subnet_id                            = "subnet-00cb5868a544013aa"
    tags                                 = {
        "Name" = "SpringBootApp"
    }
    tags_all                             = {
        "Name" = "SpringBootApp"
    }
    tenancy                              = "default"
    user_data                            = <<-EOT
        #!/bin/bash
        # Update and install dependencies
        yum update -y
        yum install -y git curl wget tar
        
        # Install Oracle JDK 21
        mkdir -p /usr/lib/jvm
        cd /usr/lib/jvm
        curl -LO https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
        tar -xzf jdk-21_linux-x64_bin.tar.gz
        alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-21.0.8/bin/java 2
        alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-21.0.8/bin/javac 2
        alternatives --set java /usr/lib/jvm/jdk-21.0.8/bin/java
        alternatives --set javac /usr/lib/jvm/jdk-21.0.8/bin/javac
        
        # Install Maven manually
        MAVEN_VERSION=3.8.8
        cd /opt
        curl -sLO https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
        tar -xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
        ln -s apache-maven-$MAVEN_VERSION maven
        echo "export M2_HOME=/opt/maven" >> /etc/profile.d/maven.sh
        echo "export PATH=\$M2_HOME/bin:\$PATH" >> /etc/profile.d/maven.sh
        chmod +x /etc/profile.d/maven.sh
        source /etc/profile.d/maven.sh
        
        # Clone your Spring Boot project
        cd /home/ec2-user
        git clone https://github.com/ikanko1989/SpringBootFootballClub.git
        chown -R ec2-user:ec2-user /home/ec2-user/SpringBootFootballClub
        
        # Run the app as ec2-user
        sudo -u ec2-user bash -c "
        cd /home/ec2-user/SpringBootFootballClub/FootballClub
        mvn clean spring-boot:run > /home/ec2-user/springboot.log 2>&1 &
        "
    EOT
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-07200bfd5463e5791",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 1
        http_tokens                 = "optional"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        encrypted             = false
        iops                  = 100
        tags                  = {}
        tags_all              = {}
        throughput            = 0
        volume_id             = "vol-090169513fc26d6b1"
        volume_size           = 8
        volume_type           = "gp2"
    }
}

# aws_key_pair.deployer:
resource "aws_key_pair" "deployer" {
    arn         = "arn:aws:ec2:us-east-1:381491834499:key-pair/deployer-key"
    fingerprint = "51:8f:7f:dc:ab:d0:a1:1e:16:42:29:d0:be:94:8f:ce"
    id          = "deployer-key"
    key_name    = "deployer-key"
    key_pair_id = "key-09456f5a04b49bcc8"
    key_type    = "rsa"
    public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0iALDi17WAyW51U74HOyoBoZGta1MydQwG9vNE/mMniEounLqVXU/Sjn8I94fgMQUGetWDZk57NYZbWjOkPPOUjOohfPignXZhOB7ojyxOfkkXcSrmNEccEi/XLP9MTRJJJ0Rm2VOZFchlXx1Qg3L5QvH6FqyRutg2PgayvuTW4teGKJ5nfueOoOFpxIiZhst4JEGNTSj44gSXanPVcAwqC0N0YYTnMIDM+Av+7fu95WzZmwx1562rY0g0g6w/r3d0hpn3uUTE2yGy+vVYENDFub4LyW3twTdwb2h+STDkumne2+AH/NLYdGgQqPP+hf+oR3CDtc5at5ql3HMNMoxvp5NUSJobTrrYaf5+B8J/rNZiEl+vvTllrA8bvh3vFHAtQuqpAOyHBW4ncsePuDgW0Dfo6rjf5asY7z5YeR1JJfqlSiIQyWpyI6bl2cLpX0J2Ehx1hq02RzLbOlu2FIV938DmrA2dp9jl8zhORfbU+chNxEo+FshElVpd9y4ML8ocm5Kv2pM2W9AKUlhCAg5bZ7kcTJSTlGaiXCy6cl/En0sy/y8nIvkVpzs21DeS6jOOQqxyDH5F0E6MacUzgfpeJeU0oAXcX3GFC/1TM2IK+id3k92HKMt+TGSCqujEy8POjWTqoRxVeJFgoCMlMGKaEQ58sZNEiCVVTcp9VW0WQ== root@controlplane"
    region      = "us-east-1"
    tags_all    = {}
}

# aws_security_group.allow_ssh_ping_8080:
resource "aws_security_group" "allow_ssh_ping_8080" {
    arn                    = "arn:aws:ec2:us-east-1:381491834499:security-group/sg-07200bfd5463e5791"
    description            = "Allow SSH, ICMP (ping), and TCP 8080"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-07200bfd5463e5791"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = -1
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "icmp"
            security_groups  = []
            self             = false
            to_port          = -1
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 22
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 8080
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 8080
        },
    ]
    name                   = "allow_ssh_ping_8080"
    owner_id               = "381491834499"
    region                 = "us-east-1"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "allow-ssh-ping-8080"
    }
    tags_all               = {
        "Name" = "allow-ssh-ping-8080"
    }
    vpc_id                 = "vpc-06f9b49013f2e0d5b"
}


Outputs:

public_ip = "3.80.49.220"

root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  terraform state list
aws_instance.springboot_app
aws_key_pair.deployer
aws_security_group.allow_ssh_ping_8080

root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  ping 3.80.49.220
PING 3.80.49.220 (3.80.49.220) 56(84) bytes of data.
64 bytes from 3.80.49.220: icmp_seq=1 ttl=61 time=28.6 ms
64 bytes from 3.80.49.220: icmp_seq=2 ttl=61 time=28.3 ms
64 bytes from 3.80.49.220: icmp_seq=3 ttl=61 time=28.0 ms
^C
--- 3.80.49.220 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 28.008/28.298/28.612/0.247 ms

root@controlplane ~/code via üí† default on ‚òÅÔ∏è  (us-east-1) ‚ûú  ssh -i ~/.ssh/id_rsa ec2-user@3.80.49.220
The authenticity of host '3.80.49.220 (3.80.49.220)' can't be established.
ED25519 key fingerprint is SHA256:do66K7naakfqrLx9RtOPnHFYmSGTWK8LCMYuzBFIPvI.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '3.80.49.220' (ED25519) to the list of known hosts.

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
54 package(s) needed for security, out of 98 available
Run "sudo yum update" to apply all updates.
[ec2-user@ip-172-31-19-110 ~]$ ls
[ec2-user@ip-172-31-19-110 ~]$ ll
total 0
[ec2-user@ip-172-31-19-110 ~]$ 
